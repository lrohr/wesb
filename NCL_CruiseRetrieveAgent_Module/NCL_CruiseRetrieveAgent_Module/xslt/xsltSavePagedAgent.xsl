<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/xsltSavePagedAgent.map" md5sum="fbf4d81807f546a8358402bd58660196" version="7.6.100" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		xsltSavePagedAgent.map
*   Map declaration(s):	xsltSavePagedAgent
*   Input file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FNCL_CruiseRetrieveAgent_Module%257DappContext/message%3D%257Bhttp%253A%252F%252FNCL_CruiseRetrieveAgent_Module%252FJDBCOutboundInterface%257DexecuteNclseaNcl_Wesb_Get_Agent_With_PagedResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FNCL_CruiseRetrieveAgent_Module%257DappContext/message%3D%257Bhttp%253A%252F%252FNCL_WESB_Shared_Library%252FNCL_CruiseRetrieveAgent_Interface%257DPerform_NCL_CruiseRetrieveAgentResponseMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:regexp="http://exslt.org/regular-expressions"
    xmlns:dyn="http://exslt.org/dynamic"
    xmlns:dp="http://www.datapower.com/extensions"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in7="wsdl.http://NCL_CruiseRetrieveAgent_Module/JDBCOutboundInterface"
    xmlns:in="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/nclseancl_wesb_get_agent_with_paging"
    xmlns:in2="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/nclseancl_wesb_get_agy_for_agtreq"
    xmlns:in8="http://NCL_CruiseRetrieveAgent_Module/JDBCOutboundInterface"
    xmlns:in3="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/nclseancl_wesb_get_agent_with_pagingp_cursor"
    xmlns:in4="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/nclseancl_wesb_get_agent_with_paged"
    xmlns:in5="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/nclseancl_wesb_get_agy_for_agtreqp_cursor"
    xmlns:in6="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/nclseancl_wesb_get_agent_with_pagedp_cursor"
    xmlns:out="http://NCL_WESB_Shared_Library/NCL_CruiseRetrieveAgent_Interface"
    xmlns:io="http://NCL_CruiseRetrieveAgent_Module"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io4="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io3="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io5="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io7="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io6="http://nclapi/schemas"
    xmlns:out2="wsdl.http://NCL_WESB_Shared_Library/NCL_CruiseRetrieveAgent_Interface"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io8="http://www.w3.org/2005/08/addressing"
    xmlns:map="http://NCL_CruiseRetrieveAgent_Module/xslt/xsltSavePagedAgent"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="in7 in in2 in8 in3 in4 in5 in6 str set math fn regexp dyn dp exsl date map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io3:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:xsltSavePagedAgent2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io3:smo" mode="map:xsltSavePagedAgent"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template match="io3:smo"  mode="map:xsltSavePagedAgent">
    <io3:smo>
      <context>
        <correlation>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'io:appContext'"/>
          </xsl:attribute>
          <!-- a simple data mapping: "context/correlation/logId"(string) to "logId"(string) -->
          <xsl:if test="context/correlation/logId">
            <xsl:element name="logId">
              <xsl:value-of select="context/correlation/logId"/>
            </xsl:element>
          </xsl:if>
          <!-- a structural mapping: "context/correlation/io6:NCL_CruiseRetrieveAgentRQ"(<Anonymous>) to "io6:NCL_CruiseRetrieveAgentRQ"(<Anonymous>) -->
          <xsl:if test="context/correlation/io6:NCL_CruiseRetrieveAgentRQ">
            <xsl:copy-of select="context/correlation/io6:NCL_CruiseRetrieveAgentRQ"/>
          </xsl:if>
          <xsl:element name="agent_work_getAgent">
            <xsl:element name="spGetAgentInfo">
              <!-- a simple data mapping: "body/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedResponse/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedOutput/p_totalcount"(string) to "P_TOTALCOUNT"(string) -->
              <xsl:if test="body/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedResponse/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedOutput/p_totalcount">
                <xsl:element name="P_TOTALCOUNT">
                  <xsl:value-of select="body/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedResponse/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedOutput/p_totalcount"/>
                </xsl:element>
              </xsl:if>
              <!-- a for-each transform: "p_cursor"(NclseaNcl_Wesb_Get_Agent_With_PagedP_Cursor) to "P_CURSOR"(<Anonymous>) -->
              <xsl:apply-templates select="body/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedResponse/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedOutput/p_cursor" mode="localP_cursorToP_CURSOR_968315944"/>
            </xsl:element>
          </xsl:element>
        </correlation>
      </context>
    </io3:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template name="map:xsltSavePagedAgent2">
    <xsl:param name="smo"/>
    <context>
      <correlation>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'io:appContext'"/>
        </xsl:attribute>
        <!-- a simple data mapping: "$smo/context/correlation/logId"(string) to "logId"(string) -->
        <xsl:if test="$smo/context/correlation/logId">
          <xsl:element name="logId">
            <xsl:value-of select="$smo/context/correlation/logId"/>
          </xsl:element>
        </xsl:if>
        <!-- a structural mapping: "$smo/context/correlation/io6:NCL_CruiseRetrieveAgentRQ"(<Anonymous>) to "io6:NCL_CruiseRetrieveAgentRQ"(<Anonymous>) -->
        <xsl:if test="$smo/context/correlation/io6:NCL_CruiseRetrieveAgentRQ">
          <xsl:copy-of select="$smo/context/correlation/io6:NCL_CruiseRetrieveAgentRQ"/>
        </xsl:if>
        <xsl:element name="agent_work_getAgent">
          <xsl:element name="spGetAgentInfo">
            <!-- a simple data mapping: "$smo/body/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedResponse/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedOutput/p_totalcount"(string) to "P_TOTALCOUNT"(string) -->
            <xsl:if test="$smo/body/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedResponse/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedOutput/p_totalcount">
              <xsl:element name="P_TOTALCOUNT">
                <xsl:value-of select="$smo/body/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedResponse/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedOutput/p_totalcount"/>
              </xsl:element>
            </xsl:if>
            <!-- a for-each transform: "p_cursor"(NclseaNcl_Wesb_Get_Agent_With_PagedP_Cursor) to "P_CURSOR"(<Anonymous>) -->
            <xsl:apply-templates select="$smo/body/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedResponse/in8:executeNclseaNcl_Wesb_Get_Agent_With_PagedOutput/p_cursor" mode="localP_cursorToP_CURSOR_968315944"/>
          </xsl:element>
        </xsl:element>
      </correlation>
    </context>
  </xsl:template>

  <!-- This rule represents a for-each transform: "p_cursor" to "P_CURSOR".  -->
  <xsl:template match="p_cursor"  mode="localP_cursorToP_CURSOR_968315944">
    <P_CURSOR>
      <!-- a simple data mapping: "agent_id"(string) to "AGENT_ID"(string) -->
      <xsl:if test="agent_id">
        <AGENT_ID>
          <xsl:value-of select="agent_id"/>
        </AGENT_ID>
      </xsl:if>
      <!-- a simple data mapping: "last_name"(string) to "LAST_NAME"(string) -->
      <xsl:if test="last_name">
        <LAST_NAME>
          <xsl:value-of select="last_name"/>
        </LAST_NAME>
      </xsl:if>
      <!-- a simple data mapping: "first_name"(string) to "FIRST_NAME"(string) -->
      <xsl:if test="first_name">
        <FIRST_NAME>
          <xsl:value-of select="first_name"/>
        </FIRST_NAME>
      </xsl:if>
      <!-- a simple data mapping: "middle_name"(string) to "MIDDLE_NAME"(string) -->
      <xsl:if test="middle_name">
        <MIDDLE_NAME>
          <xsl:value-of select="middle_name"/>
        </MIDDLE_NAME>
      </xsl:if>
      <!-- a simple data mapping: "full_name"(string) to "FULL_NAME"(string) -->
      <xsl:if test="full_name">
        <FULL_NAME>
          <xsl:value-of select="full_name"/>
        </FULL_NAME>
      </xsl:if>
      <!-- a simple data mapping: "salutation"(string) to "SALUTATION"(string) -->
      <xsl:if test="salutation">
        <SALUTATION>
          <xsl:value-of select="salutation"/>
        </SALUTATION>
      </xsl:if>
      <!-- a simple data mapping: "title"(string) to "TITLE"(string) -->
      <xsl:if test="title">
        <TITLE>
          <xsl:value-of select="title"/>
        </TITLE>
      </xsl:if>
      <!-- a simple data mapping: "sex"(string) to "SEX"(string) -->
      <xsl:if test="sex">
        <SEX>
          <xsl:value-of select="sex"/>
        </SEX>
      </xsl:if>
      <!-- a simple data mapping: "birthday"(string) to "BIRTHDAY"(string) -->
      <xsl:if test="birthday">
        <BIRTHDAY>
          <xsl:value-of select="birthday"/>
        </BIRTHDAY>
      </xsl:if>
      <!-- a simple data mapping: "iatan_number"(string) to "IATAN_NUMBER"(string) -->
      <xsl:if test="iatan_number">
        <IATAN_NUMBER>
          <xsl:value-of select="iatan_number"/>
        </IATAN_NUMBER>
      </xsl:if>
      <!-- a simple data mapping: "iatan_company_name"(string) to "IATAN_COMPANY_NAME"(string) -->
      <xsl:if test="iatan_company_name">
        <IATAN_COMPANY_NAME>
          <xsl:value-of select="iatan_company_name"/>
        </IATAN_COMPANY_NAME>
      </xsl:if>
      <!-- a simple data mapping: "iatan_holder_name"(string) to "IATAN_HOLDER_NAME"(string) -->
      <xsl:if test="iatan_holder_name">
        <IATAN_HOLDER_NAME>
          <xsl:value-of select="iatan_holder_name"/>
        </IATAN_HOLDER_NAME>
      </xsl:if>
      <!-- a simple data mapping: "iatan_company_number"(string) to "IATAN_COMPANY_NUMBER"(string) -->
      <xsl:if test="iatan_company_number">
        <IATAN_COMPANY_NUMBER>
          <xsl:value-of select="iatan_company_number"/>
        </IATAN_COMPANY_NUMBER>
      </xsl:if>
      <!-- a simple data mapping: "comments"(string) to "COMMENTS"(string) -->
      <xsl:if test="comments">
        <COMMENTS>
          <xsl:value-of select="comments"/>
        </COMMENTS>
      </xsl:if>
      <!-- a simple data mapping: "iatan_expiration_date"(string) to "IATAN_EXPIRATION_DATE"(string) -->
      <xsl:if test="iatan_expiration_date">
        <IATAN_EXPIRATION_DATE>
          <xsl:value-of select="iatan_expiration_date"/>
        </IATAN_EXPIRATION_DATE>
      </xsl:if>
      <!-- a simple data mapping: "email"(string) to "EMAIL"(string) -->
      <xsl:if test="email">
        <EMAIL>
          <xsl:value-of select="email"/>
        </EMAIL>
      </xsl:if>
      <!-- a simple data mapping: "is_district_sm"(string) to "IS_DISTRICT_SM"(string) -->
      <xsl:if test="is_district_sm">
        <IS_DISTRICT_SM>
          <xsl:value-of select="is_district_sm"/>
        </IS_DISTRICT_SM>
      </xsl:if>
      <!-- a simple data mapping: "is_incentive_sm"(string) to "IS_INCENTIVE_SM"(string) -->
      <xsl:if test="is_incentive_sm">
        <IS_INCENTIVE_SM>
          <xsl:value-of select="is_incentive_sm"/>
        </IS_INCENTIVE_SM>
      </xsl:if>
      <!-- a simple data mapping: "web_login_name"(string) to "WEB_LOGIN_NAME"(string) -->
      <xsl:if test="web_login_name">
        <WEB_LOGIN_NAME>
          <xsl:value-of select="web_login_name"/>
        </WEB_LOGIN_NAME>
      </xsl:if>
      <!-- a simple data mapping: "web_last_login"(string) to "WEB_LAST_LOGIN"(date) -->
      <xsl:if test="web_last_login">
        <WEB_LAST_LOGIN>
          <xsl:value-of select="web_last_login"/>
        </WEB_LAST_LOGIN>
      </xsl:if>
      <!-- a simple data mapping: "web_canaccesagencydata"(string) to "WEB_CANACCESAGENCYDATA"(string) -->
      <xsl:if test="web_canaccesagencydata">
        <WEB_CANACCESAGENCYDATA>
          <xsl:value-of select="web_canaccesagencydata"/>
        </WEB_CANACCESAGENCYDATA>
      </xsl:if>
      <!-- a simple data mapping: "allow_web_access"(string) to "ALLOW_WEB_ACCESS"(string) -->
      <xsl:if test="allow_web_access">
        <ALLOW_WEB_ACCESS>
          <xsl:value-of select="allow_web_access"/>
        </ALLOW_WEB_ACCESS>
      </xsl:if>
      <!-- a simple data mapping: "agency_id"(string) to "AGENCY_ID"(string) -->
      <xsl:if test="agency_id">
        <AGENCY_ID>
          <xsl:value-of select="agency_id"/>
        </AGENCY_ID>
      </xsl:if>
      <!-- a simple data mapping: "position"(string) to "POSITION"(string) -->
      <xsl:if test="position">
        <POSITION>
          <xsl:value-of select="position"/>
        </POSITION>
      </xsl:if>
      <!-- a simple data mapping: "phone_number"(string) to "PHONE_NUMBER"(string) -->
      <xsl:if test="phone_number">
        <PHONE_NUMBER>
          <xsl:value-of select="phone_number"/>
        </PHONE_NUMBER>
      </xsl:if>
      <!-- a simple data mapping: "phone_ext"(string) to "PHONE_EXT"(string) -->
      <xsl:if test="phone_ext">
        <PHONE_EXT>
          <xsl:value-of select="phone_ext"/>
        </PHONE_EXT>
      </xsl:if>
      <!-- a simple data mapping: "agent_location"(string) to "AGENT_LOCATION"(string) -->
      <xsl:if test="agent_location">
        <AGENT_LOCATION>
          <xsl:value-of select="agent_location"/>
        </AGENT_LOCATION>
      </xsl:if>
      <!-- a simple data mapping: "contact_preference"(string) to "CONTACT_PREFERENCE"(string) -->
      <xsl:if test="contact_preference">
        <CONTACT_PREFERENCE>
          <xsl:value-of select="contact_preference"/>
        </CONTACT_PREFERENCE>
      </xsl:if>
      <!-- a simple data mapping: "rnum"(string) to "RNUM"(string) -->
      <xsl:if test="rnum">
        <RNUM>
          <xsl:value-of select="rnum"/>
        </RNUM>
      </xsl:if>
    </P_CURSOR>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
