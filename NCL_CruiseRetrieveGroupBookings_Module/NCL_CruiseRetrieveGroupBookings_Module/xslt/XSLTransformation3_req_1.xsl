<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/XSLTransformation3_req_1.map" md5sum="db6279f821da23f82ee3f7ee9f87205a" version="7.6.100" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		XSLTransformation3_req_1.map
*   Map declaration(s):	XSLTransformation3_req_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FNCL_CruiseRetrieveGroupBookings_Module%257DApp_context/message%3D%257Bhttp%253A%252F%252FNCL_CruiseRetrieveGroupBookings_Module%252FDB_LOOKUP%257DexecuteNclseaNcl_Wesb_Retrieve_Grp_BookingBGResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FNCL_CruiseRetrieveGroupBookings_Module%257DApp_context/message%3D%257Bhttp%253A%252F%252FNCL_WESB_Shared_Library%252FNCL_CruiseRetrieveGroupBookings_Interface%257DPerform_NCL_CruiseRetrieveGroupBookingsResponseMsg/xpath%3D%252F/smo.xsd
*   XSLT import(s):   	XSLTransformation3_req_1_dateFrom.xsl, XSLTransformation3_req_1_name.xsl, XSLTransformation3_req_1_custom.xsl, XSLTransformation3_req_1_status.xsl
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:regexp="http://exslt.org/regular-expressions"
    xmlns:dyn="http://exslt.org/dynamic"
    xmlns:dp="http://www.datapower.com/extensions"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in="http://NCL_CruiseRetrieveGroupBookings_Module/DB_LOOKUP"
    xmlns:in2="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/nclseancl_wesb_retrieve_grp_booking"
    xmlns:in3="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/nclseancl_wesb_retrieve_grp_bookingbg"
    xmlns:in4="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/nclseancl_wesb_retrieve_grp_bookingp_cursor"
    xmlns:in5="http://www.ibm.com/xmlns/prod/websphere/bo/6.0.0"
    xmlns:in6="wsdl.http://NCL_CruiseRetrieveGroupBookings_Module/DB_LOOKUP"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out="http://NCL_WESB_Shared_Library/NCL_CruiseRetrieveGroupBookings_Interface"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io5="http://nclapi/schemas"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io8="http://www.w3.org/2005/08/addressing"
    xmlns:io7="http://NCL_CruiseRetrieveGroupBookings_Module"
    xmlns:out2="wsdl.http://NCL_WESB_Shared_Library/NCL_CruiseRetrieveGroupBookings_Interface"
    xmlns:MapUtils="xalan://com.ibm.wbiserver.transform.util.MapUtils"
    xmlns:map="http://NCL_CruiseRetrieveGroupBookings_Module/xslt/XSLTransformation3_req_1"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="in in2 in3 in4 in5 in6 str set math fn regexp dyn dp exsl date MapUtils map xalan msl"
    version="1.0">

  <!-- imports  -->
  <xsl:import href="XSLTransformation3_req_1_dateFrom.xsl"/>
  <xsl:import href="XSLTransformation3_req_1_name.xsl"/>
  <xsl:import href="XSLTransformation3_req_1_custom.xsl"/>
  <xsl:import href="XSLTransformation3_req_1_status.xsl"/>
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io2:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:XSLTransformation3_req_12">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io2:smo" mode="map:XSLTransformation3_req_1"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template match="io2:smo"  mode="map:XSLTransformation3_req_1">
    <io2:smo>
      <context>
        <correlation>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'io7:App_context'"/>
          </xsl:attribute>
          <!-- a structural mapping: "context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ"(<Anonymous>) to "io5:NCL_CruiseRetrieveGroupBookingsRQ"(<Anonymous>) -->
          <xsl:if test="context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ">
            <xsl:copy-of select="context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ"/>
          </xsl:if>
          <!-- a simple data mapping: "context/correlation/LogID"(string) to "LogID"(string) -->
          <xsl:if test="context/correlation/LogID">
            <xsl:element name="LogID">
              <xsl:value-of select="context/correlation/LogID"/>
            </xsl:element>
          </xsl:if>
        </correlation>
      </context>
      <xsl:element name="body">
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out2:Perform_NCL_CruiseRetrieveGroupBookingsResponseMsg'"/>
        </xsl:attribute>
        <xsl:element name="out:Perform_NCL_CruiseRetrieveGroupBookingsResponse">
          <xsl:element name="io5:NCL_CruiseRetrieveGroupBookingsRS">
            <!-- a simple data mapping: "body/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGResponse/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGOutput/NclseaNcl_Wesb_Retrieve_Grp_Booking/p_maxrecordsoutput"(int) to "MaxResponses"(positiveInteger) -->
            <xsl:if test="body/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGResponse/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGOutput/NclseaNcl_Wesb_Retrieve_Grp_Booking/p_maxrecordsoutput">
              <xsl:attribute name="MaxResponses">
                <xsl:value-of select="body/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGResponse/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGOutput/NclseaNcl_Wesb_Retrieve_Grp_Booking/p_maxrecordsoutput"/>
              </xsl:attribute>
            </xsl:if>
            <!-- a simple data mapping: "context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ/@TransactionIdentifier"(StringLength1to32) to "TransactionIdentifier"(StringLength1to32) -->
            <xsl:if test="context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ/@TransactionIdentifier">
              <xsl:attribute name="TransactionIdentifier">
                <xsl:value-of select="context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ/@TransactionIdentifier"/>
              </xsl:attribute>
            </xsl:if>
            <!-- a structural mapping with no associated source:  to "io5:Success"(SuccessType) -->
            <xsl:element name="io5:Success">
              <xsl:call-template name="ToSuccess"/>
            </xsl:element>
            <xsl:element name="io5:GroupsInfo">
              <!-- a for-each transform: "p_cursor"(NclseaNcl_Wesb_Retrieve_Grp_BookingP_Cursor) to "io5:GroupInfo"(<Anonymous>) -->
              <xsl:apply-templates select="body/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGResponse/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGOutput/NclseaNcl_Wesb_Retrieve_Grp_Booking/p_cursor" mode="localP_cursorToGroupInfo_1677300809"/>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </xsl:element>
    </io2:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template name="map:XSLTransformation3_req_12">
    <xsl:param name="smo"/>
    <context>
      <correlation>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'io7:App_context'"/>
        </xsl:attribute>
        <!-- a structural mapping: "$smo/context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ"(<Anonymous>) to "io5:NCL_CruiseRetrieveGroupBookingsRQ"(<Anonymous>) -->
        <xsl:if test="$smo/context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ">
          <xsl:copy-of select="$smo/context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ"/>
        </xsl:if>
        <!-- a simple data mapping: "$smo/context/correlation/LogID"(string) to "LogID"(string) -->
        <xsl:if test="$smo/context/correlation/LogID">
          <xsl:element name="LogID">
            <xsl:value-of select="$smo/context/correlation/LogID"/>
          </xsl:element>
        </xsl:if>
      </correlation>
    </context>
    <xsl:element name="body">
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out2:Perform_NCL_CruiseRetrieveGroupBookingsResponseMsg'"/>
      </xsl:attribute>
      <xsl:element name="out:Perform_NCL_CruiseRetrieveGroupBookingsResponse">
        <xsl:element name="io5:NCL_CruiseRetrieveGroupBookingsRS">
          <!-- a simple data mapping: "$smo/body/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGResponse/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGOutput/NclseaNcl_Wesb_Retrieve_Grp_Booking/p_maxrecordsoutput"(int) to "MaxResponses"(positiveInteger) -->
          <xsl:if test="$smo/body/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGResponse/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGOutput/NclseaNcl_Wesb_Retrieve_Grp_Booking/p_maxrecordsoutput">
            <xsl:attribute name="MaxResponses">
              <xsl:value-of select="$smo/body/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGResponse/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGOutput/NclseaNcl_Wesb_Retrieve_Grp_Booking/p_maxrecordsoutput"/>
            </xsl:attribute>
          </xsl:if>
          <!-- a simple data mapping: "$smo/context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ/@TransactionIdentifier"(StringLength1to32) to "TransactionIdentifier"(StringLength1to32) -->
          <xsl:if test="$smo/context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ/@TransactionIdentifier">
            <xsl:attribute name="TransactionIdentifier">
              <xsl:value-of select="$smo/context/correlation/io5:NCL_CruiseRetrieveGroupBookingsRQ/@TransactionIdentifier"/>
            </xsl:attribute>
          </xsl:if>
          <!-- a structural mapping with no associated source:  to "io5:Success"(SuccessType) -->
          <xsl:element name="io5:Success">
            <xsl:call-template name="ToSuccess"/>
          </xsl:element>
          <xsl:element name="io5:GroupsInfo">
            <!-- a for-each transform: "p_cursor"(NclseaNcl_Wesb_Retrieve_Grp_BookingP_Cursor) to "io5:GroupInfo"(<Anonymous>) -->
            <xsl:apply-templates select="$smo/body/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGResponse/in:executeNclseaNcl_Wesb_Retrieve_Grp_BookingBGOutput/NclseaNcl_Wesb_Retrieve_Grp_Booking/p_cursor" mode="localP_cursorToGroupInfo_1677300809"/>
          </xsl:element>
        </xsl:element>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <!-- This rule represents a for-each transform: "p_cursor" to "io5:GroupInfo".  -->
  <xsl:template match="p_cursor"  mode="localP_cursorToGroupInfo_1677300809">
    <io5:GroupInfo>
      <!-- a simple data mapping: "currency_code"(string) to "CurrencyCode"(AlphaLength3) -->
      <xsl:if test="currency_code">
        <xsl:attribute name="CurrencyCode">
          <xsl:value-of select="currency_code"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple mapping with no associated source:  to "DecimalPlaces"(nonNegativeInteger) -->
      <xsl:attribute name="DecimalPlaces">
        <xsl:value-of select="'2'"/>
      </xsl:attribute>
      <!-- a simple data mapping: "allocationexist"(string) to "AllocationExist"(boolean) -->
      <!-- variables for custom code -->
      <xsl:variable name="allocationexist" select="allocationexist"/>
      <xsl:if test="string-length($allocationexist) &gt; &apos;0&apos;">
        <xsl:attribute name="AllocationExist">
          <xsl:value-of select="MapUtils:stringToBoolean($allocationexist, 'false')"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "group_id"(decimal) to "GroupCode"(StringLength1to16) -->
      <xsl:if test="group_id">
        <xsl:attribute name="GroupCode">
          <xsl:value-of select="group_id"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "group_init_date"(string) to "GroupInitDate"(string) -->
      <xsl:if test="group_init_date">
        <xsl:attribute name="GroupInitDate">
          <xsl:value-of select="group_init_date"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "group_name"(string) to "GroupName"(StringLength1to255) -->
      <xsl:if test="group_name">
        <xsl:attribute name="GroupName">
          <xsl:value-of select="group_name"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "group_status"(string) to "GroupStatus"(StringLength3) -->
      <xsl:if test="group_status">
        <xsl:attribute name="GroupStatus">
          <!-- variables for custom code -->
          <xsl:variable name="group_status" select="group_status"/>
          <xsl:call-template name="Group_statusToGroupStatus">
            <xsl:with-param name="group_status" select="$group_status"/>
          </xsl:call-template>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "group_type"(string) to "GroupType"(StringLength1to16) -->
      <xsl:if test="group_type">
        <xsl:attribute name="GroupType">
          <xsl:value-of select="group_type"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "n_of_guests"(decimal) to "NumberOfGuests"(Numeric1to99) -->
      <xsl:if test="n_of_guests">
        <xsl:attribute name="NumberOfGuests">
          <xsl:value-of select="n_of_guests"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "office_code"(string) to "OfficeCode"(StringLength1to16) -->
      <xsl:if test="office_code">
        <xsl:attribute name="OfficeCode">
          <xsl:value-of select="office_code"/>
        </xsl:attribute>
      </xsl:if>
      <io5:AgentInfo>
        <!-- a simple data mapping: "agent_location"(string) to "AgentLocation"(string) -->
        <xsl:if test="agent_location">
          <xsl:attribute name="AgentLocation">
            <xsl:value-of select="agent_location"/>
          </xsl:attribute>
        </xsl:if>
        <xsl:element name="io5:PersonName">
          <!-- a simple data mapping: "first_name"(string) to "io5:GivenName"(StringLength1to64) -->
          <xsl:if test="first_name">
            <xsl:element name="io5:GivenName">
              <xsl:value-of select="first_name"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "middle_name"(string) to "io5:MiddleName"(StringLength1to64) -->
          <!-- variables for custom code -->
          <xsl:variable name="middle_name" select="middle_name"/>
          <xsl:if test="string-length($middle_name) &gt; &apos;0&apos;">
            <xsl:element name="io5:MiddleName">
              <xsl:value-of select="middle_name"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "last_name"(string) to "io5:Surname"(StringLength1to64) -->
          <xsl:element name="io5:Surname">
            <xsl:value-of select="last_name"/>
          </xsl:element>
          <!-- a simple data mapping: "title"(string) to "io5:NameTitle"(StringLength1to16) -->
          <xsl:if test="title">
            <xsl:element name="io5:NameTitle">
              <xsl:value-of select="title"/>
            </xsl:element>
          </xsl:if>
        </xsl:element>
        <xsl:element name="io5:Telephone">
          <!-- a simple data mapping: "phone_ext"(string) to "Extension"(NumericStringLength1to5) -->
          <!-- variables for custom code -->
          <xsl:variable name="phone_ext" select="phone_ext"/>
          <xsl:if test="string-length($phone_ext) &gt; &apos;0&apos;">
            <xsl:attribute name="Extension">
              <xsl:value-of select="phone_ext"/>
            </xsl:attribute>
          </xsl:if>
          <!-- a simple data mapping: "phone_number"(string) to "PhoneNumber"(StringLength1to32) -->
          <xsl:attribute name="PhoneNumber">
            <xsl:value-of select="phone_number"/>
          </xsl:attribute>
        </xsl:element>
        <xsl:element name="io5:EmployeeInfo">
          <!-- a simple data mapping: "agent_id"(decimal) to "EmployeeId"(StringLength1to16) -->
          <xsl:if test="agent_id">
            <xsl:attribute name="EmployeeId">
              <xsl:value-of select="agent_id"/>
            </xsl:attribute>
          </xsl:if>
        </xsl:element>
        <xsl:element name="io5:UserLogin">
          <!-- a simple data mapping: "web_login_name"(string) to "UserLoginName"(StringLength1to64) -->
          <xsl:attribute name="UserLoginName">
            <xsl:value-of select="web_login_name"/>
          </xsl:attribute>
        </xsl:element>
        <xsl:element name="io5:ContactPreferences">
          <!-- a simple data mapping: "contact_preference"(string) to "ContactPreference"(StringLength1to64) -->
          <!-- variables for custom code -->
          <xsl:variable name="contact_preference" select="contact_preference"/>
          <xsl:if test="string-length($contact_preference) &gt; &apos;0&apos;">
            <xsl:attribute name="ContactPreference">
              <xsl:value-of select="contact_preference"/>
            </xsl:attribute>
          </xsl:if>
        </xsl:element>
      </io5:AgentInfo>
      <xsl:element name="io5:AgencyInfo">
        <xsl:element name="io5:RequestorID">
          <!-- a simple data mapping: "agency_id"(decimal) to "ID"(StringLength1to32) -->
          <xsl:attribute name="ID">
            <xsl:value-of select="agency_id"/>
          </xsl:attribute>
          <!-- a simple mapping with no associated source:  to "Type"(OTA_CodeType) -->
          <xsl:attribute name="Type">
            <xsl:value-of select="'5'"/>
          </xsl:attribute>
        </xsl:element>
        <xsl:element name="io5:Email">
          <!-- a simple content mapping -->
          <xsl:value-of select="email"/>
        </xsl:element>
      </xsl:element>
      <xsl:element name="io5:SelectedSailing">
        <!-- a simple data mapping: "sail_date_from"(string) to "Start"(string) -->
        <xsl:if test="sail_date_from">
          <xsl:attribute name="Start">
            <!-- variables for custom code -->
            <xsl:variable name="sail_date_from" select="sail_date_from"/>
            <xsl:call-template name="Sail_date_fromToStart">
              <xsl:with-param name="sail_date_from" select="$sail_date_from"/>
            </xsl:call-template>
          </xsl:attribute>
        </xsl:if>
        <!-- a simple data mapping: "package_id"(decimal) to "VoyageID"(StringLength1to32) -->
        <xsl:if test="package_id">
          <xsl:attribute name="VoyageID">
            <xsl:value-of select="package_id"/>
          </xsl:attribute>
        </xsl:if>
        <xsl:element name="io5:CruiseLine">
          <!-- a simple data mapping: "ship_code"(string) to "ShipCode"(StringLength1to16) -->
          <xsl:if test="ship_code">
            <xsl:attribute name="ShipCode">
              <xsl:value-of select="ship_code"/>
            </xsl:attribute>
          </xsl:if>
          <!-- a simple data mapping: "ship_code"(string) to "ShipName"(StringLength1to64) -->
          <xsl:if test="ship_code">
            <xsl:attribute name="ShipName">
              <!-- variables for custom code -->
              <xsl:variable name="ship_code" select="ship_code"/>
              <xsl:call-template name="Ship_codeToShipName">
                <xsl:with-param name="ship_code" select="$ship_code"/>
              </xsl:call-template>
            </xsl:attribute>
          </xsl:if>
        </xsl:element>
      </xsl:element>
    </io5:GroupInfo>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
