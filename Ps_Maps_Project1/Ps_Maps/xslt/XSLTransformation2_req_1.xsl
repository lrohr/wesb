<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/XSLTransformation2_req_1.map" md5sum="f2b012ee4ccdf328b7451e97fe7fa632" version="7.6.100" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		XSLTransformation2_req_1.map
*   Map declaration(s):	XSLTransformation2_req_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FPs_Maps%257DAppContext/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FPs_Maps%257DAppContext/xpath%3D%252F/smo.xsd
*   XSLT import(s):   	XSLTransformation2_req_1_ID.xsl
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:regexp="http://exslt.org/regular-expressions"
    xmlns:dyn="http://exslt.org/dynamic"
    xmlns:dp="http://www.datapower.com/extensions"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:io="http://Ps_Maps"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io4="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io3="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io5="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io8="http://www.w3.org/2005/08/addressing"
    xmlns:io7="http://tempuri.org/NewPerson.xsd"
    xmlns:map="http://Ps_Maps/xslt/XSLTransformation2_req_1"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="str set math fn regexp dyn dp exsl date map xalan msl"
    version="1.0">

  <!-- imports  -->
  <xsl:import href="XSLTransformation2_req_1_ID.xsl"/>
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io3:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:XSLTransformation2_req_12">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io3:smo" mode="map:XSLTransformation2_req_1"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template match="io3:smo"  mode="map:XSLTransformation2_req_1">
    <io3:smo>
      <context>
        <correlation>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'io:AppContext'"/>
          </xsl:attribute>
          <!-- a structural mapping: "context/correlation/NCL_PS_APPDATA1"(<Anonymous>) to "NCL_PS_APPDATA1"(<Anonymous>) -->
          <xsl:if test="context/correlation/NCL_PS_APPDATA1">
            <xsl:copy-of select="context/correlation/NCL_PS_APPDATA1"/>
          </xsl:if>
          <xsl:element name="NCL_PS_DATA1">
            <xsl:element name="MsgData">
              <xsl:element name="Transaction">
                <xsl:element name="APPLICANT">
                  <!-- a simple data mapping: "context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_PERSON_ID/text()[1]"() to "APPLID"(<string>) -->
                  <xsl:if test="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_PERSON_ID/text()[1]">
                    <xsl:element name="APPLID">
                      <!-- variables for custom code -->
                      <xsl:variable name="mixed" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_PERSON_ID/text()[1]"/>
                      <xsl:call-template name="MixedToAPPLID">
                        <xsl:with-param name="mixed" select="$mixed"/>
                      </xsl:call-template>
                    </xsl:element>
                  </xsl:if>
                  <!-- a simple data mapping: "context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/SEX/text()[1]"() to "SEX"(<string>) -->
                  <xsl:if test="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/SEX/text()[1]">
                    <xsl:element name="SEX">
                      <xsl:value-of select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/SEX/text()[1]"/>
                    </xsl:element>
                  </xsl:if>
                  <!-- a simple data mapping: "context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/BIRTHDATE/text()[1]"() to "BIRTHDATE"(string) -->
                  <xsl:if test="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/BIRTHDATE/text()[1]">
                    <xsl:element name="BIRTHDATE">
                      <xsl:value-of select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/BIRTHDATE/text()[1]"/>
                    </xsl:element>
                  </xsl:if>
                  <!-- a structural mapping: "context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_EFFDT[1]"(<Anonymous>) to "APPL_DATA_EFFDT"(<Anonymous>) -->
                  <!-- variables for custom code -->
                  <xsl:variable name="HRS_APP_EFFDT" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_EFFDT[1]"/>
                  <xsl:variable name="NCL_AIRPORT" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/NCL_AIRPORT"/>
                  <xsl:variable name="NCL_DL_STATE" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/NCL_DL_STATE"/>
                  <xsl:variable name="DRIVERS_LIC_NBR" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/DRIVERS_LIC_NBR"/>
                  <xsl:variable name="HRS_APP_NAMES" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_NAMES[1]"/>
                  <xsl:variable name="HRS_APP_ADDRESS" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_ADDRESS[1]"/>
                  <xsl:call-template name="localHRS_APP_EFFDT_et_alToAPPL_DATA_EFFDT_1504164763">
                    <xsl:with-param name="HRS_APP_EFFDT" select="."/>
                    <xsl:with-param name="NCL_AIRPORT" select="$NCL_AIRPORT"/>
                    <xsl:with-param name="NCL_DL_STATE" select="$NCL_DL_STATE"/>
                    <xsl:with-param name="DRIVERS_LIC_NBR" select="$DRIVERS_LIC_NBR"/>
                    <xsl:with-param name="HRS_APP_NAMES" select="$HRS_APP_NAMES"/>
                    <xsl:with-param name="HRS_APP_ADDRESS" select="$HRS_APP_ADDRESS"/>
                  </xsl:call-template>
                  <!-- a for-each transform: "HRS_APP_PHONE"(<Anonymous>) to "APPLICNT_PHONE"(<Anonymous>) -->
                  <xsl:apply-templates select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_PHONE" mode="localHRS_APP_PHONEToAPPLICNT_PHONE_2114852765"/>
                  <!-- a for-each transform: "HRS_APP_EMAIL"(<Anonymous>) to "APP_EMAIL_ADDRS"(<Anonymous>) -->
                  <xsl:apply-templates select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_EMAIL" mode="localHRS_APP_EMAILToAPP_EMAIL_ADDRS_818977880"/>
                  <!-- a structural mapping: "context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_NID"(<Anonymous>) to "NCL_APPL_NID"(<Anonymous>) -->
                  <xsl:apply-templates select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_NID[1]" mode="localHRS_APP_NIDToNCL_APPL_NID_1854568077"/>
                  <!-- a for-each transform: "HRS_APP_DIV"(<Anonymous>) to "APPLICANT_DATA"(<Anonymous>) -->
                  <xsl:apply-templates select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_DIV" mode="localHRS_APP_DIVToAPPLICANT_DATA_1657747702"/>
                  <!-- a structural mapping: "context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_JOB_OPENING"(<Anonymous>) to "NCL_JOB_REQ_WRK"(<Anonymous>) -->
                  <xsl:apply-templates select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_JOB_OPENING[1]" mode="localHRS_JOB_OPENINGToNCL_JOB_REQ_WRK_158935354"/>
                  <!-- a for-each transform: "HRS_APP_CITSHIP"(<Anonymous>) to "APP_CITIZENSHIP"(<Anonymous>) -->
                  <!-- variables for custom code -->
                  <xsl:variable name="HRS_APP_CITSHIP" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_CITSHIP"/>
                  <xsl:variable name="HRS_APP_CZ_PSPT" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_CZ_PSPT"/>
                  <xsl:for-each select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_CITSHIP">
                    <xsl:call-template name="localHRS_APP_CITSHIP_et_alToAPP_CITIZENSHIP_244091319">
                      <xsl:with-param name="HRS_APP_CITSHIP" select="."/>
                      <xsl:with-param name="HRS_APP_CZ_PSPT" select="$HRS_APP_CZ_PSPT"/>
                    </xsl:call-template>
                  </xsl:for-each>
                  <!-- a for-each transform: "HRS_APP_VSA_DAT"(<Anonymous>) to "APP_VSA_PMT_DTA"(<Anonymous>) -->
                  <xsl:apply-templates select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_VSA_DAT" mode="localHRS_APP_VSA_DATToAPP_VSA_PMT_DTA_1430521208"/>
                  <!-- a for-each transform: "HRS_APP_LIC_VW"(<Anonymous>) to "NCL_LICENSE_HNR"(<Anonymous>) -->
                  <!-- variables for custom code -->
                  <xsl:variable name="HRS_APP_LIC_VW" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_LIC_VW"/>
                  <xsl:variable name="HRS_ACCOMP_TBL" select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_ACCOMP_TBL"/>
                  <xsl:for-each select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_LIC_VW">
                    <xsl:call-template name="localHRS_APP_LIC_VW_et_alToNCL_LICENSE_HNR_758367350">
                      <xsl:with-param name="HRS_APP_LIC_VW" select="."/>
                      <xsl:with-param name="HRS_ACCOMP_TBL" select="$HRS_ACCOMP_TBL"/>
                    </xsl:call-template>
                  </xsl:for-each>
                  <!-- a for-each transform: "HRS_APP_CL_ITEM"(<Anonymous>) to "NCL_CHECKLIST"(<Anonymous>) -->
                  <xsl:apply-templates select="context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_CL_ITEM" mode="localHRS_APP_CL_ITEMToNCL_CHECKLIST_1015798255"/>
                </xsl:element>
              </xsl:element>
            </xsl:element>
          </xsl:element>
        </correlation>
      </context>
      <!-- a simple mapping with no associated source:  to "body"(string) -->
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'xs4xs:string'"/>
        </xsl:attribute>
        <xsl:text>test2</xsl:text>
      </body>
    </io3:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template name="map:XSLTransformation2_req_12">
    <xsl:param name="smo"/>
    <context>
      <correlation>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'io:AppContext'"/>
        </xsl:attribute>
        <!-- a structural mapping: "$smo/context/correlation/NCL_PS_APPDATA1"(<Anonymous>) to "NCL_PS_APPDATA1"(<Anonymous>) -->
        <xsl:if test="$smo/context/correlation/NCL_PS_APPDATA1">
          <xsl:copy-of select="$smo/context/correlation/NCL_PS_APPDATA1"/>
        </xsl:if>
        <xsl:element name="NCL_PS_DATA1">
          <xsl:element name="MsgData">
            <xsl:element name="Transaction">
              <xsl:element name="APPLICANT">
                <!-- a simple data mapping: "$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_PERSON_ID/text()[1]"() to "APPLID"(<string>) -->
                <xsl:if test="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_PERSON_ID/text()[1]">
                  <xsl:element name="APPLID">
                    <!-- variables for custom code -->
                    <xsl:variable name="mixed" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_PERSON_ID/text()[1]"/>
                    <xsl:call-template name="MixedToAPPLID">
                      <xsl:with-param name="mixed" select="$mixed"/>
                    </xsl:call-template>
                  </xsl:element>
                </xsl:if>
                <!-- a simple data mapping: "$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/SEX/text()[1]"() to "SEX"(<string>) -->
                <xsl:if test="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/SEX/text()[1]">
                  <xsl:element name="SEX">
                    <xsl:value-of select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/SEX/text()[1]"/>
                  </xsl:element>
                </xsl:if>
                <!-- a simple data mapping: "$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/BIRTHDATE/text()[1]"() to "BIRTHDATE"(string) -->
                <xsl:if test="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/BIRTHDATE/text()[1]">
                  <xsl:element name="BIRTHDATE">
                    <xsl:value-of select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/BIRTHDATE/text()[1]"/>
                  </xsl:element>
                </xsl:if>
                <!-- a structural mapping: "$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_EFFDT[1]"(<Anonymous>) to "APPL_DATA_EFFDT"(<Anonymous>) -->
                <!-- variables for custom code -->
                <xsl:variable name="HRS_APP_EFFDT" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_EFFDT[1]"/>
                <xsl:variable name="NCL_AIRPORT" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/NCL_AIRPORT"/>
                <xsl:variable name="NCL_DL_STATE" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/NCL_DL_STATE"/>
                <xsl:variable name="DRIVERS_LIC_NBR" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/DRIVERS_LIC_NBR"/>
                <xsl:variable name="HRS_APP_NAMES" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_NAMES[1]"/>
                <xsl:variable name="HRS_APP_ADDRESS" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_ADDRESS[1]"/>
                <xsl:call-template name="localHRS_APP_EFFDT_et_alToAPPL_DATA_EFFDT_1504164763">
                  <xsl:with-param name="HRS_APP_EFFDT" select="."/>
                  <xsl:with-param name="NCL_AIRPORT" select="$NCL_AIRPORT"/>
                  <xsl:with-param name="NCL_DL_STATE" select="$NCL_DL_STATE"/>
                  <xsl:with-param name="DRIVERS_LIC_NBR" select="$DRIVERS_LIC_NBR"/>
                  <xsl:with-param name="HRS_APP_NAMES" select="$HRS_APP_NAMES"/>
                  <xsl:with-param name="HRS_APP_ADDRESS" select="$HRS_APP_ADDRESS"/>
                </xsl:call-template>
                <!-- a for-each transform: "HRS_APP_PHONE"(<Anonymous>) to "APPLICNT_PHONE"(<Anonymous>) -->
                <xsl:apply-templates select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_PHONE" mode="localHRS_APP_PHONEToAPPLICNT_PHONE_2114852765"/>
                <!-- a for-each transform: "HRS_APP_EMAIL"(<Anonymous>) to "APP_EMAIL_ADDRS"(<Anonymous>) -->
                <xsl:apply-templates select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_EMAIL" mode="localHRS_APP_EMAILToAPP_EMAIL_ADDRS_818977880"/>
                <!-- a structural mapping: "$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_NID"(<Anonymous>) to "NCL_APPL_NID"(<Anonymous>) -->
                <xsl:apply-templates select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_NID[1]" mode="localHRS_APP_NIDToNCL_APPL_NID_1854568077"/>
                <!-- a for-each transform: "HRS_APP_DIV"(<Anonymous>) to "APPLICANT_DATA"(<Anonymous>) -->
                <xsl:apply-templates select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_DIV" mode="localHRS_APP_DIVToAPPLICANT_DATA_1657747702"/>
                <!-- a structural mapping: "$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_JOB_OPENING"(<Anonymous>) to "NCL_JOB_REQ_WRK"(<Anonymous>) -->
                <xsl:apply-templates select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_JOB_OPENING[1]" mode="localHRS_JOB_OPENINGToNCL_JOB_REQ_WRK_158935354"/>
                <!-- a for-each transform: "HRS_APP_CITSHIP"(<Anonymous>) to "APP_CITIZENSHIP"(<Anonymous>) -->
                <!-- variables for custom code -->
                <xsl:variable name="HRS_APP_CITSHIP" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_CITSHIP"/>
                <xsl:variable name="HRS_APP_CZ_PSPT" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_CZ_PSPT"/>
                <xsl:for-each select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_CITSHIP">
                  <xsl:call-template name="localHRS_APP_CITSHIP_et_alToAPP_CITIZENSHIP_244091319">
                    <xsl:with-param name="HRS_APP_CITSHIP" select="."/>
                    <xsl:with-param name="HRS_APP_CZ_PSPT" select="$HRS_APP_CZ_PSPT"/>
                  </xsl:call-template>
                </xsl:for-each>
                <!-- a for-each transform: "HRS_APP_VSA_DAT"(<Anonymous>) to "APP_VSA_PMT_DTA"(<Anonymous>) -->
                <xsl:apply-templates select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_VSA_DAT" mode="localHRS_APP_VSA_DATToAPP_VSA_PMT_DTA_1430521208"/>
                <!-- a for-each transform: "HRS_APP_LIC_VW"(<Anonymous>) to "NCL_LICENSE_HNR"(<Anonymous>) -->
                <!-- variables for custom code -->
                <xsl:variable name="HRS_APP_LIC_VW" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_LIC_VW"/>
                <xsl:variable name="HRS_ACCOMP_TBL" select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_ACCOMP_TBL"/>
                <xsl:for-each select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_LIC_VW">
                  <xsl:call-template name="localHRS_APP_LIC_VW_et_alToNCL_LICENSE_HNR_758367350">
                    <xsl:with-param name="HRS_APP_LIC_VW" select="."/>
                    <xsl:with-param name="HRS_ACCOMP_TBL" select="$HRS_ACCOMP_TBL"/>
                  </xsl:call-template>
                </xsl:for-each>
                <!-- a for-each transform: "HRS_APP_CL_ITEM"(<Anonymous>) to "NCL_CHECKLIST"(<Anonymous>) -->
                <xsl:apply-templates select="$smo/context/correlation/NCL_PS_APPDATA1/MsgData/Transaction/HRS_APPLICANT/HRS_APP_CL_ITEM" mode="localHRS_APP_CL_ITEMToNCL_CHECKLIST_1015798255"/>
              </xsl:element>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </correlation>
    </context>
    <!-- a simple mapping with no associated source:  to "body"(string) -->
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'xs4xs:string'"/>
      </xsl:attribute>
      <xsl:text>test2</xsl:text>
    </body>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_EFFDT" to "APPL_DATA_EFFDT".  -->
  <xsl:template name="localHRS_APP_EFFDT_et_alToAPPL_DATA_EFFDT_1504164763">
    <xsl:param name="HRS_APP_EFFDT"/>
    <xsl:param name="NCL_AIRPORT"/>
    <xsl:param name="NCL_DL_STATE"/>
    <xsl:param name="DRIVERS_LIC_NBR"/>
    <xsl:param name="HRS_APP_NAMES"/>
    <xsl:param name="HRS_APP_ADDRESS"/>
    <APPL_DATA_EFFDT>
      <!-- a simple data mapping: "$HRS_APP_EFFDT/EFFDT/text()[1]"() to "EFFDT"(string) -->
      <xsl:if test="$HRS_APP_EFFDT/EFFDT/text()[1]">
        <EFFDT>
          <xsl:value-of select="$HRS_APP_EFFDT/EFFDT/text()[1]"/>
        </EFFDT>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_NAMES/LAST_NAME_SRCH/text()[1]"() to "LAST_NAME_SRCH"(<string>) -->
      <xsl:if test="$HRS_APP_NAMES/LAST_NAME_SRCH/text()[1]">
        <LAST_NAME_SRCH>
          <xsl:value-of select="$HRS_APP_NAMES/LAST_NAME_SRCH/text()[1]"/>
        </LAST_NAME_SRCH>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_NAMES/FIRST_NAME_SRCH/text()[1]"() to "FIRST_NAME_SRCH"(<string>) -->
      <xsl:if test="$HRS_APP_NAMES/FIRST_NAME_SRCH/text()[1]">
        <FIRST_NAME_SRCH>
          <xsl:value-of select="$HRS_APP_NAMES/FIRST_NAME_SRCH/text()[1]"/>
        </FIRST_NAME_SRCH>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_ADDRESS/COUNTRY/text()[1]"() to "COUNTRY"(<string>) -->
      <xsl:if test="$HRS_APP_ADDRESS/COUNTRY/text()[1]">
        <COUNTRY>
          <xsl:value-of select="$HRS_APP_ADDRESS/COUNTRY/text()[1]"/>
        </COUNTRY>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_ADDRESS/ADDRESS1/text()[1]"() to "ADDRESS1"(<string>) -->
      <xsl:if test="$HRS_APP_ADDRESS/ADDRESS1/text()[1]">
        <ADDRESS1>
          <xsl:value-of select="$HRS_APP_ADDRESS/ADDRESS1/text()[1]"/>
        </ADDRESS1>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_ADDRESS/ADDRESS2/text()[1]"() to "ADDRESS2"(<string>) -->
      <xsl:if test="$HRS_APP_ADDRESS/ADDRESS2/text()[1]">
        <ADDRESS2>
          <xsl:value-of select="$HRS_APP_ADDRESS/ADDRESS2/text()[1]"/>
        </ADDRESS2>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_ADDRESS/CITY/text()[1]"() to "CITY"(<string>) -->
      <xsl:if test="$HRS_APP_ADDRESS/CITY/text()[1]">
        <CITY>
          <xsl:value-of select="$HRS_APP_ADDRESS/CITY/text()[1]"/>
        </CITY>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_ADDRESS/STATE/text()[1]"() to "STATE"(<string>) -->
      <xsl:if test="$HRS_APP_ADDRESS/STATE/text()[1]">
        <STATE>
          <xsl:value-of select="$HRS_APP_ADDRESS/STATE/text()[1]"/>
        </STATE>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_ADDRESS/POSTAL/text()[1]"() to "POSTAL"(<string>) -->
      <xsl:if test="$HRS_APP_ADDRESS/POSTAL/text()[1]">
        <POSTAL>
          <xsl:value-of select="$HRS_APP_ADDRESS/POSTAL/text()[1]"/>
        </POSTAL>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_EFFDT/MAR_STATUS/text()[1]"() to "MAR_STATUS"(<string>) -->
      <xsl:if test="$HRS_APP_EFFDT/MAR_STATUS/text()[1]">
        <MAR_STATUS>
          <xsl:value-of select="$HRS_APP_EFFDT/MAR_STATUS/text()[1]"/>
        </MAR_STATUS>
      </xsl:if>
      <!-- a simple data mapping: "$NCL_AIRPORT/text()[1]"() to "NCL_AIRPORT"(string) -->
      <xsl:if test="$NCL_AIRPORT/text()[1]">
        <NCL_AIRPORT>
          <xsl:value-of select="$NCL_AIRPORT/text()[1]"/>
        </NCL_AIRPORT>
      </xsl:if>
      <!-- a simple data mapping: "$DRIVERS_LIC_NBR/text()[1]"() to "DRIVERS_LIC_NBR"(string) -->
      <xsl:if test="$DRIVERS_LIC_NBR/text()[1]">
        <DRIVERS_LIC_NBR>
          <xsl:value-of select="$DRIVERS_LIC_NBR/text()[1]"/>
        </DRIVERS_LIC_NBR>
      </xsl:if>
      <!-- a simple data mapping: "$NCL_DL_STATE/text()[1]"() to "NCL_DL_STATE"(string) -->
      <xsl:if test="$NCL_DL_STATE/text()[1]">
        <NCL_DL_STATE>
          <xsl:value-of select="$NCL_DL_STATE/text()[1]"/>
        </NCL_DL_STATE>
      </xsl:if>
    </APPL_DATA_EFFDT>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_PHONE" to "APPLICNT_PHONE".  -->
  <xsl:template match="HRS_APP_PHONE"  mode="localHRS_APP_PHONEToAPPLICNT_PHONE_2114852765">
    <APPLICNT_PHONE>
      <!-- a simple data mapping: "HRS_PHONE_TYPE/text()[1]"() to "PHONE_TYPE"(<string>) -->
      <xsl:if test="HRS_PHONE_TYPE/text()[1]">
        <PHONE_TYPE>
          <xsl:value-of select="HRS_PHONE_TYPE/text()[1]"/>
        </PHONE_TYPE>
      </xsl:if>
      <!-- a simple data mapping: "PHONE/text()[1]"() to "PHONE"(<string>) -->
      <xsl:if test="PHONE/text()[1]">
        <PHONE>
          <xsl:value-of select="PHONE/text()[1]"/>
        </PHONE>
      </xsl:if>
    </APPLICNT_PHONE>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_EMAIL" to "APP_EMAIL_ADDRS".  -->
  <xsl:template match="HRS_APP_EMAIL"  mode="localHRS_APP_EMAILToAPP_EMAIL_ADDRS_818977880">
    <APP_EMAIL_ADDRS>
      <!-- a simple data mapping: "HRS_E_ADDR_TYPE/text()[1]"() to "E_ADDR_TYPE"(<string>) -->
      <xsl:if test="HRS_E_ADDR_TYPE/text()[1]">
        <E_ADDR_TYPE>
          <xsl:value-of select="HRS_E_ADDR_TYPE/text()[1]"/>
        </E_ADDR_TYPE>
      </xsl:if>
      <!-- a simple data mapping: "EMAIL_ADDR/text()[1]"() to "EMAIL_ADDR"(<string>) -->
      <xsl:if test="EMAIL_ADDR/text()[1]">
        <EMAIL_ADDR>
          <xsl:value-of select="EMAIL_ADDR/text()[1]"/>
        </EMAIL_ADDR>
      </xsl:if>
    </APP_EMAIL_ADDRS>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_NID" to "NCL_APPL_NID".  -->
  <xsl:template match="HRS_APP_NID"  mode="localHRS_APP_NIDToNCL_APPL_NID_1854568077">
    <NCL_APPL_NID>
      <!-- a simple data mapping: "NATIONAL_ID/text()[1]"() to "NATIONAL_ID"(<string>) -->
      <xsl:if test="NATIONAL_ID/text()[1]">
        <NATIONAL_ID>
          <xsl:value-of select="NATIONAL_ID/text()[1]"/>
        </NATIONAL_ID>
      </xsl:if>
    </NCL_APPL_NID>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_JOB_OPENING" to "NCL_JOB_REQ_WRK".  -->
  <xsl:template match="HRS_JOB_OPENING"  mode="localHRS_JOB_OPENINGToNCL_JOB_REQ_WRK_158935354">
    <NCL_JOB_REQ_WRK>
      <!-- a simple data mapping: "BUSINESS_UNIT/text()[1]"() to "BUSINESS_UNIT"(<string>) -->
      <xsl:if test="BUSINESS_UNIT/text()[1]">
        <BUSINESS_UNIT>
          <xsl:value-of select="BUSINESS_UNIT/text()[1]"/>
        </BUSINESS_UNIT>
      </xsl:if>
      <!-- a simple data mapping: "DEPTID/text()[1]"() to "DEPTID"(<string>) -->
      <xsl:if test="DEPTID/text()[1]">
        <DEPTID>
          <xsl:value-of select="DEPTID/text()[1]"/>
        </DEPTID>
      </xsl:if>
      <!-- a simple data mapping: "HRS_PRM_JOBCODE/text()[1]"() to "JOBCODE"(<string>) -->
      <xsl:if test="HRS_PRM_JOBCODE/text()[1]">
        <JOBCODE>
          <xsl:value-of select="HRS_PRM_JOBCODE/text()[1]"/>
        </JOBCODE>
      </xsl:if>
      <!-- a simple data mapping: "HRS_PRM_LOCATION/text()[1]"() to "LOCATION"(<string>) -->
      <xsl:if test="HRS_PRM_LOCATION/text()[1]">
        <LOCATION>
          <xsl:value-of select="HRS_PRM_LOCATION/text()[1]"/>
        </LOCATION>
      </xsl:if>
      <!-- a simple data mapping: "COMPANY/text()[1]"() to "COMPANY"(<string>) -->
      <xsl:if test="COMPANY/text()[1]">
        <COMPANY>
          <xsl:value-of select="COMPANY/text()[1]"/>
        </COMPANY>
      </xsl:if>
    </NCL_JOB_REQ_WRK>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_CITSHIP" to "APP_CITIZENSHIP".  -->
  <xsl:template name="localHRS_APP_CITSHIP_et_alToAPP_CITIZENSHIP_244091319">
    <xsl:param name="HRS_APP_CITSHIP"/>
    <xsl:param name="HRS_APP_CZ_PSPT"/>
    <APP_CITIZENSHIP>
      <!-- a simple data mapping: "$HRS_APP_CITSHIP/CITIZENSHIP_STATUS/text()[1]"() to "CITIZENSHIP_STATUS"(<string>) -->
      <xsl:if test="$HRS_APP_CITSHIP/CITIZENSHIP_STATUS/text()[1]">
        <CITIZENSHIP_STATUS>
          <xsl:value-of select="$HRS_APP_CITSHIP/CITIZENSHIP_STATUS/text()[1]"/>
        </CITIZENSHIP_STATUS>
      </xsl:if>
      <!-- a for-each transform: "HRS_APP_CZ_PSPT"(<Anonymous>) to "APP_CITIZN_PSPT"(<Anonymous>) -->
      <xsl:apply-templates select="$HRS_APP_CZ_PSPT" mode="localHRS_APP_CZ_PSPTToAPP_CITIZN_PSPT_1509635509"/>
    </APP_CITIZENSHIP>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_CZ_PSPT" to "APP_CITIZN_PSPT".  -->
  <xsl:template match="HRS_APP_CZ_PSPT"  mode="localHRS_APP_CZ_PSPTToAPP_CITIZN_PSPT_1509635509">
    <APP_CITIZN_PSPT>
      <!-- a simple data mapping: "HRS_PERSON_ID/text()[1]"() to "APPLID"(<string>) -->
      <xsl:if test="HRS_PERSON_ID/text()[1]">
        <APPLID>
          <xsl:value-of select="HRS_PERSON_ID/text()[1]"/>
        </APPLID>
      </xsl:if>
      <!-- a simple data mapping: "COUNTRY/text()[1]"() to "COUNTRY"(<string>) -->
      <xsl:if test="COUNTRY/text()[1]">
        <COUNTRY>
          <xsl:value-of select="COUNTRY/text()[1]"/>
        </COUNTRY>
      </xsl:if>
      <!-- a simple data mapping: "PASSPORT_NBR/text()[1]"() to "PASSPORT_NBR"(<string>) -->
      <xsl:if test="PASSPORT_NBR/text()[1]">
        <PASSPORT_NBR>
          <xsl:value-of select="PASSPORT_NBR/text()[1]"/>
        </PASSPORT_NBR>
      </xsl:if>
      <!-- a simple data mapping: "DT_ISSUED/text()[1]"() to "DT_ISSUED"(string) -->
      <xsl:if test="DT_ISSUED/text()[1]">
        <DT_ISSUED>
          <xsl:value-of select="DT_ISSUED/text()[1]"/>
        </DT_ISSUED>
      </xsl:if>
      <!-- a simple data mapping: "EXPIRATN_DT/text()[1]"() to "EXPIRATN_DT"(string) -->
      <xsl:if test="EXPIRATN_DT/text()[1]">
        <EXPIRATN_DT>
          <xsl:value-of select="EXPIRATN_DT/text()[1]"/>
        </EXPIRATN_DT>
      </xsl:if>
      <!-- a simple data mapping: "COUNTRY_PASSPORT/text()[1]"() to "COUNTRY_PASSPORT"(<string>) -->
      <xsl:if test="COUNTRY_PASSPORT/text()[1]">
        <COUNTRY_PASSPORT>
          <xsl:value-of select="COUNTRY_PASSPORT/text()[1]"/>
        </COUNTRY_PASSPORT>
      </xsl:if>
      <!-- a simple data mapping: "STATE_PASSPORT/text()[1]"() to "STATE_PASSPORT"(<string>) -->
      <xsl:if test="STATE_PASSPORT/text()[1]">
        <STATE_PASSPORT>
          <xsl:value-of select="STATE_PASSPORT/text()[1]"/>
        </STATE_PASSPORT>
      </xsl:if>
      <!-- a simple data mapping: "CITY_PASSPORT/text()[1]"() to "CITY_PASSPORT"(<string>) -->
      <xsl:if test="CITY_PASSPORT/text()[1]">
        <CITY_PASSPORT>
          <xsl:value-of select="CITY_PASSPORT/text()[1]"/>
        </CITY_PASSPORT>
      </xsl:if>
      <!-- a simple data mapping: "ISSUING_AUTHORITY/text()[1]"() to "ISSUING_AUTHORITY"(<string>) -->
      <xsl:if test="ISSUING_AUTHORITY/text()[1]">
        <ISSUING_AUTHORITY>
          <xsl:value-of select="ISSUING_AUTHORITY/text()[1]"/>
        </ISSUING_AUTHORITY>
      </xsl:if>
      <!-- a simple data mapping: "COMMENTS/text()[1]"() to "COMMENTS"(string) -->
      <xsl:if test="COMMENTS/text()[1]">
        <COMMENTS>
          <xsl:value-of select="COMMENTS/text()[1]"/>
        </COMMENTS>
      </xsl:if>
    </APP_CITIZN_PSPT>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_VSA_DAT" to "APP_VSA_PMT_DTA".  -->
  <xsl:template match="HRS_APP_VSA_DAT"  mode="localHRS_APP_VSA_DATToAPP_VSA_PMT_DTA_1430521208">
    <APP_VSA_PMT_DTA>
      <!-- a simple data mapping: "HRS_PERSON_ID/text()[1]"() to "APPLID"(<string>) -->
      <xsl:if test="HRS_PERSON_ID/text()[1]">
        <APPLID>
          <xsl:value-of select="HRS_PERSON_ID/text()[1]"/>
        </APPLID>
      </xsl:if>
      <!-- a simple data mapping: "COUNTRY/text()[1]"() to "COUNTRY"(<string>) -->
      <xsl:if test="COUNTRY/text()[1]">
        <COUNTRY>
          <xsl:value-of select="COUNTRY/text()[1]"/>
        </COUNTRY>
      </xsl:if>
      <!-- a simple data mapping: "HRS_VISA_PERMIT_TP/text()[1]"() to "VISA_PERMIT_TYPE"(<string>) -->
      <xsl:if test="HRS_VISA_PERMIT_TP/text()[1]">
        <VISA_PERMIT_TYPE>
          <xsl:value-of select="HRS_VISA_PERMIT_TP/text()[1]"/>
        </VISA_PERMIT_TYPE>
      </xsl:if>
      <!-- a simple data mapping: "VISA_WRKPMT_NBR/text()[1]"() to "VISA_WRKPMT_NBR"(<string>) -->
      <xsl:if test="VISA_WRKPMT_NBR/text()[1]">
        <VISA_WRKPMT_NBR>
          <xsl:value-of select="VISA_WRKPMT_NBR/text()[1]"/>
        </VISA_WRKPMT_NBR>
      </xsl:if>
      <!-- a simple data mapping: "VISA_WRKPMT_STATUS/text()[1]"() to "VISA_WRKPMT_STATUS"(<string>) -->
      <xsl:if test="VISA_WRKPMT_STATUS/text()[1]">
        <VISA_WRKPMT_STATUS>
          <xsl:value-of select="VISA_WRKPMT_STATUS/text()[1]"/>
        </VISA_WRKPMT_STATUS>
      </xsl:if>
      <!-- a simple data mapping: "STATUS_DT/text()[1]"() to "STATUS_DT"(string) -->
      <xsl:if test="STATUS_DT/text()[1]">
        <STATUS_DT>
          <xsl:value-of select="STATUS_DT/text()[1]"/>
        </STATUS_DT>
      </xsl:if>
      <!-- a simple data mapping: "DT_ISSUED/text()[1]"() to "DT_ISSUED"(string) -->
      <xsl:if test="DT_ISSUED/text()[1]">
        <DT_ISSUED>
          <xsl:value-of select="DT_ISSUED/text()[1]"/>
        </DT_ISSUED>
      </xsl:if>
      <!-- a simple data mapping: "PLACE_ISSUED/text()[1]"() to "PLACE_ISSUED"(<string>) -->
      <xsl:if test="PLACE_ISSUED/text()[1]">
        <PLACE_ISSUED>
          <xsl:value-of select="PLACE_ISSUED/text()[1]"/>
        </PLACE_ISSUED>
      </xsl:if>
      <!-- a simple data mapping: "DURATION_TIME/text()[1]"() to "DURATION_TIME"(double) -->
      <xsl:if test="DURATION_TIME/text()[1]">
        <DURATION_TIME>
          <xsl:value-of select="DURATION_TIME/text()[1]"/>
        </DURATION_TIME>
      </xsl:if>
      <!-- a simple data mapping: "DURATION_TYPE/text()[1]"() to "DURATION_TYPE"(<string>) -->
      <xsl:if test="DURATION_TYPE/text()[1]">
        <DURATION_TYPE>
          <xsl:value-of select="DURATION_TYPE/text()[1]"/>
        </DURATION_TYPE>
      </xsl:if>
      <!-- a simple data mapping: "START_DT/text()[1]"() to "START_DT"(string) -->
      <xsl:if test="START_DT/text()[1]">
        <START_DT>
          <xsl:value-of select="START_DT/text()[1]"/>
        </START_DT>
      </xsl:if>
      <!-- a simple data mapping: "EXPIRATN_DT/text()[1]"() to "EXPIRATN_DT"(string) -->
      <xsl:if test="EXPIRATN_DT/text()[1]">
        <EXPIRATN_DT>
          <xsl:value-of select="EXPIRATN_DT/text()[1]"/>
        </EXPIRATN_DT>
      </xsl:if>
      <!-- a simple data mapping: "ISSUING_AUTHORITY/text()[1]"() to "ISSUING_AUTHORITY"(<string>) -->
      <xsl:if test="ISSUING_AUTHORITY/text()[1]">
        <ISSUING_AUTHORITY>
          <xsl:value-of select="ISSUING_AUTHORITY/text()[1]"/>
        </ISSUING_AUTHORITY>
      </xsl:if>
    </APP_VSA_PMT_DTA>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_LIC_VW" to "NCL_LICENSE_HNR".  -->
  <xsl:template name="localHRS_APP_LIC_VW_et_alToNCL_LICENSE_HNR_758367350">
    <xsl:param name="HRS_APP_LIC_VW"/>
    <xsl:param name="HRS_ACCOMP_TBL"/>
    <NCL_LICENSE_HNR>
      <!-- a simple data mapping: "$HRS_APP_LIC_VW/HRS_PERSON_ID/text()[1]"() to "APPLID"(<string>) -->
      <xsl:if test="$HRS_APP_LIC_VW/HRS_PERSON_ID/text()[1]">
        <APPLID>
          <xsl:value-of select="$HRS_APP_LIC_VW/HRS_PERSON_ID/text()[1]"/>
        </APPLID>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_LIC_VW/ACCOMPLISHMENT/text()[1]"() to "ACCOMPLISHMENT"(<string>) -->
      <xsl:if test="$HRS_APP_LIC_VW/ACCOMPLISHMENT/text()[1]">
        <ACCOMPLISHMENT>
          <xsl:value-of select="$HRS_APP_LIC_VW/ACCOMPLISHMENT/text()[1]"/>
        </ACCOMPLISHMENT>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_ACCOMP_TBL/DESCR/text()[1]"() to "DESCR"(<string>) -->
      <xsl:if test="$HRS_ACCOMP_TBL/DESCR/text()[1]">
        <DESCR>
          <xsl:value-of select="$HRS_ACCOMP_TBL/DESCR/text()[1]"/>
        </DESCR>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_ACCOMP_TBL/DESCRSHORT/text()[1]"() to "DESCRSHORT"(<string>) -->
      <xsl:if test="$HRS_ACCOMP_TBL/DESCRSHORT/text()[1]">
        <DESCRSHORT>
          <xsl:value-of select="$HRS_ACCOMP_TBL/DESCRSHORT/text()[1]"/>
        </DESCRSHORT>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_LIC_VW/LICENSE_NBR/text()[1]"() to "LICENSE_NBR"(<string>) -->
      <xsl:if test="$HRS_APP_LIC_VW/LICENSE_NBR/text()[1]">
        <LICENSE_NBR>
          <xsl:value-of select="$HRS_APP_LIC_VW/LICENSE_NBR/text()[1]"/>
        </LICENSE_NBR>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_LIC_VW/DT_ISSUED/text()[1]"() to "DT_ISSUED"(string) -->
      <xsl:if test="$HRS_APP_LIC_VW/DT_ISSUED/text()[1]">
        <DT_ISSUED>
          <xsl:value-of select="$HRS_APP_LIC_VW/DT_ISSUED/text()[1]"/>
        </DT_ISSUED>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_LIC_VW/EXPIRATN_DT/text()[1]"() to "EXPIRATN_DT"(string) -->
      <xsl:if test="$HRS_APP_LIC_VW/EXPIRATN_DT/text()[1]">
        <EXPIRATN_DT>
          <xsl:value-of select="$HRS_APP_LIC_VW/EXPIRATN_DT/text()[1]"/>
        </EXPIRATN_DT>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_LIC_VW/EVALUATION_DT/text()"() to "EVALUATION_DT"(string) -->
      <xsl:if test="$HRS_APP_LIC_VW/EVALUATION_DT/text()">
        <EVALUATION_DT>
          <xsl:value-of select="$HRS_APP_LIC_VW/EVALUATION_DT/text()"/>
        </EVALUATION_DT>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_APP_LIC_VW/GRANTOR/text()[1]"() to "GRANTOR"(<string>) -->
      <xsl:if test="$HRS_APP_LIC_VW/GRANTOR/text()[1]">
        <GRANTOR>
          <xsl:value-of select="$HRS_APP_LIC_VW/GRANTOR/text()[1]"/>
        </GRANTOR>
      </xsl:if>
      <!-- a simple data mapping: "$HRS_ACCOMP_TBL/ACCOMP_CATEGORY/text()[1]"() to "ACCOMP_CATEGORY"(<string>) -->
      <xsl:if test="$HRS_ACCOMP_TBL/ACCOMP_CATEGORY/text()[1]">
        <ACCOMP_CATEGORY>
          <xsl:value-of select="$HRS_ACCOMP_TBL/ACCOMP_CATEGORY/text()[1]"/>
        </ACCOMP_CATEGORY>
      </xsl:if>
    </NCL_LICENSE_HNR>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_CL_ITEM" to "NCL_CHECKLIST".  -->
  <xsl:template match="HRS_APP_CL_ITEM"  mode="localHRS_APP_CL_ITEMToNCL_CHECKLIST_1015798255">
    <NCL_CHECKLIST>
      <!-- a simple data mapping: "CHKLST_ITEM_CD/text()[1]"() to "CHKLST_ITEM_CD"(<string>) -->
      <xsl:if test="CHKLST_ITEM_CD/text()[1]">
        <CHKLST_ITEM_CD>
          <xsl:value-of select="CHKLST_ITEM_CD/text()[1]"/>
        </CHKLST_ITEM_CD>
      </xsl:if>
      <!-- a simple data mapping: "STATUS_DT/text()[1]"() to "STATUS_DT"(string) -->
      <xsl:if test="STATUS_DT/text()[1]">
        <STATUS_DT>
          <xsl:value-of select="STATUS_DT/text()[1]"/>
        </STATUS_DT>
      </xsl:if>
    </NCL_CHECKLIST>
  </xsl:template>

  <!-- This rule represents a for-each transform: "HRS_APP_DIV" to "APPLICANT_DATA".  -->
  <xsl:template match="HRS_APP_DIV"  mode="localHRS_APP_DIVToAPPLICANT_DATA_1657747702">
    <APPLICANT_DATA>
      <!-- a simple data mapping: "ETHNIC_GROUP/text()"() to "ETHNIC_GROUP"(<string>) -->
      <xsl:if test="ETHNIC_GROUP/text()">
        <ETHNIC_GROUP>
          <xsl:value-of select="ETHNIC_GROUP/text()"/>
        </ETHNIC_GROUP>
      </xsl:if>
    </APPLICANT_DATA>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
